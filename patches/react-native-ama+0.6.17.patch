diff --git a/node_modules/react-native-ama/dist/ama.rules.json b/node_modules/react-native-ama/dist/ama.rules.json
new file mode 100644
index 0000000..0967ef4
--- /dev/null
+++ b/node_modules/react-native-ama/dist/ama.rules.json
@@ -0,0 +1 @@
+{}
diff --git a/node_modules/react-native-ama/dist/commonjs/ama.rules.json b/node_modules/react-native-ama/dist/commonjs/ama.rules.json
new file mode 100644
index 0000000..0967ef4
--- /dev/null
+++ b/node_modules/react-native-ama/dist/commonjs/ama.rules.json
@@ -0,0 +1 @@
+{}
diff --git a/node_modules/react-native-ama/dist/commonjs/internal/logger.js b/node_modules/react-native-ama/dist/commonjs/internal/logger.js
index cc224c8..65c49d3 100644
--- a/node_modules/react-native-ama/dist/commonjs/internal/logger.js
+++ b/node_modules/react-native-ama/dist/commonjs/internal/logger.js
@@ -7,7 +7,7 @@ exports.shouldIgnoreContrastCheckForDisabledElement = exports.logFailure = expor
 
 var _logger = require("./logger.rules");
 
-const overrideRules = require('./../../ama.rules.json');
+const overrideRules = {};
 
 const getRuleAction = __DEV__ ? rule => {
   var _overrideRules$rules;
diff --git a/node_modules/react-native-ama/dist/commonjs/internal/logger.js.map b/node_modules/react-native-ama/dist/commonjs/internal/logger.js.map
index 293b17d..cd9288d 100644
--- a/node_modules/react-native-ama/dist/commonjs/internal/logger.js.map
+++ b/node_modules/react-native-ama/dist/commonjs/internal/logger.js.map
@@ -1 +1 @@
-{"version":3,"names":["overrideRules","require","getRuleAction","__DEV__","rule","customRule","canRuleBeOverridden","rules","undefined","LOGGER_RULES","logFailure","action","message","extra","formattedMessage","SHELL_COLORS","BG_RED","RESET","BLUE","YELLOW","RULES_HELP","console","info","warn","getContrastCheckerMaxDepth","CONTRAST_CHECKER_MAX_DEPTH","shouldIgnoreContrastCheckForDisabledElement","IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS","isAccessibilityLabelAllowed","accessibilityLabel","accessibilityLabelExceptions","includes"],"sources":["logger.ts"],"sourcesContent":["import {\n  IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS,\n  Rule,\n  RuleAction,\n  SHELL_COLORS,\n  canRuleBeOverridden,\n} from './logger.rules';\nimport {\n  CONTRAST_CHECKER_MAX_DEPTH,\n  LOGGER_RULES,\n  RULES_HELP,\n} from './logger.rules';\n\nconst overrideRules: OverrideRule = require('./../../ama.rules.json');\n\ntype OverrideRule = {\n  rules: Record<\n    | Partial<Rule>\n    | 'CONTRAST_CHECKER_MAX_DEPTH'\n    | 'IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS',\n    RuleAction\n  > | null;\n  accessibilityLabelExceptions: string[];\n};\n\nexport type LogParams = {\n  rule: Rule;\n  message: string;\n  extra?: any;\n};\n\nexport const getRuleAction = __DEV__\n  ? (rule: Rule): RuleAction => {\n      const customRule = canRuleBeOverridden?.(rule)\n        ? overrideRules?.rules?.[rule]\n        : undefined;\n\n      return customRule || LOGGER_RULES![rule];\n    }\n  : null;\n\ntype LogFailure = LogParams & {\n  action: RuleAction;\n};\n\ntype CHECK_STATUS = 'ERROR' | 'WARNING';\n\nexport const logFailure = __DEV__\n  ? ({ action, rule, message, extra = '' }: LogFailure): CHECK_STATUS => {\n      // @ts-ignore\n      const formattedMessage = `❌ ${SHELL_COLORS.BG_RED}[ AMA ]${SHELL_COLORS.RESET}: ${SHELL_COLORS.BLUE}${rule}${SHELL_COLORS.RESET} - ${SHELL_COLORS.YELLOW}${message}${SHELL_COLORS.RESET}\\n\\n${RULES_HELP[rule]}\\n\\n`;\n\n      switch (action) {\n        case 'MUST_NOT':\n        case 'MUST':\n          console.info(formattedMessage, extra || '', '\\n');\n\n          return 'ERROR';\n        case 'PLEASE_FORGIVE_ME':\n          // console.info(formattedMessage, extra || '', '\\n');\n\n          return 'WARNING';\n        case 'SHOULD_NOT':\n        default:\n          console.warn(formattedMessage, extra || '', '\\n');\n\n          return 'WARNING';\n      }\n    }\n  : null;\n\nexport const getContrastCheckerMaxDepth = __DEV__\n  ? () => {\n      return (\n        overrideRules?.rules?.CONTRAST_CHECKER_MAX_DEPTH ||\n        CONTRAST_CHECKER_MAX_DEPTH\n      );\n    }\n  : null;\n\nexport const shouldIgnoreContrastCheckForDisabledElement = __DEV__\n  ? () => {\n      return (\n        overrideRules?.rules?.IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS ||\n        IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS\n      );\n    }\n  : null;\n\nexport const isAccessibilityLabelAllowed = __DEV__\n  ? (accessibilityLabel: string) => {\n      return overrideRules?.accessibilityLabelExceptions?.includes(\n        accessibilityLabel,\n      );\n    }\n  : null;\n"],"mappings":";;;;;;;AAAA;;AAaA,MAAMA,aAA2B,GAAGC,OAAO,CAAC,wBAAD,CAA3C;;AAkBO,MAAMC,aAAa,GAAGC,OAAO,GAC/BC,IAAD,IAA4B;EAAA;;EAC1B,MAAMC,UAAU,GAAGC,2BAAA,aAAAA,2BAAA,mBAAAA,2BAAA,EAAsBF,IAAtB,IACfJ,aADe,aACfA,aADe,+CACfA,aAAa,CAAEO,KADA,yDACf,qBAAuBH,IAAvB,CADe,GAEfI,SAFJ;EAIA,OAAOH,UAAU,IAAII,oBAAA,CAAcL,IAAd,CAArB;AACD,CAP+B,GAQhC,IARG;;AAgBA,MAAMM,UAAU,GAAGP,OAAO,GAC7B,QAAqE;EAAA,IAApE;IAAEQ,MAAF;IAAUP,IAAV;IAAgBQ,OAAhB;IAAyBC,KAAK,GAAG;EAAjC,CAAoE;EACnE;EACA,MAAMC,gBAAgB,GAAI,KAAIC,oBAAA,CAAaC,MAAO,UAASD,oBAAA,CAAaE,KAAM,KAAIF,oBAAA,CAAaG,IAAK,GAAEd,IAAK,GAAEW,oBAAA,CAAaE,KAAM,MAAKF,oBAAA,CAAaI,MAAO,GAAEP,OAAQ,GAAEG,oBAAA,CAAaE,KAAM,OAAMG,kBAAA,CAAWhB,IAAX,CAAiB,MAA/M;;EAEA,QAAQO,MAAR;IACE,KAAK,UAAL;IACA,KAAK,MAAL;MACEU,OAAO,CAACC,IAAR,CAAaR,gBAAb,EAA+BD,KAAK,IAAI,EAAxC,EAA4C,IAA5C;MAEA,OAAO,OAAP;;IACF,KAAK,mBAAL;MACE;MAEA,OAAO,SAAP;;IACF,KAAK,YAAL;IACA;MACEQ,OAAO,CAACE,IAAR,CAAaT,gBAAb,EAA+BD,KAAK,IAAI,EAAxC,EAA4C,IAA5C;MAEA,OAAO,SAAP;EAdJ;AAgBD,CArB4B,GAsB7B,IAtBG;;AAwBA,MAAMW,0BAA0B,GAAGrB,OAAO,GAC7C,MAAM;EAAA;;EACJ,OACE,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEO,KAAf,gFAAsBkB,0BAAtB,KACAA,kCAFF;AAID,CAN4C,GAO7C,IAPG;;AASA,MAAMC,2CAA2C,GAAGvB,OAAO,GAC9D,MAAM;EAAA;;EACJ,OACE,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEO,KAAf,gFAAsBoB,qCAAtB,KACAA,6CAFF;AAID,CAN6D,GAO9D,IAPG;;AASA,MAAMC,2BAA2B,GAAGzB,OAAO,GAC7C0B,kBAAD,IAAgC;EAAA;;EAC9B,OAAO7B,aAAP,aAAOA,aAAP,gDAAOA,aAAa,CAAE8B,4BAAtB,0DAAO,sBAA6CC,QAA7C,CACLF,kBADK,CAAP;AAGD,CAL6C,GAM9C,IANG"}
\ No newline at end of file
+{"version":3,"names":["overrideRules","require","getRuleAction","__DEV__","rule","customRule","canRuleBeOverridden","rules","undefined","LOGGER_RULES","logFailure","action","message","extra","formattedMessage","SHELL_COLORS","BG_RED","RESET","BLUE","YELLOW","RULES_HELP","console","info","warn","getContrastCheckerMaxDepth","CONTRAST_CHECKER_MAX_DEPTH","shouldIgnoreContrastCheckForDisabledElement","IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS","isAccessibilityLabelAllowed","accessibilityLabel","accessibilityLabelExceptions","includes"],"sources":["logger.ts"],"sourcesContent":["import {\n  IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS,\n  Rule,\n  RuleAction,\n  SHELL_COLORS,\n  canRuleBeOverridden,\n} from './logger.rules';\nimport {\n  CONTRAST_CHECKER_MAX_DEPTH,\n  LOGGER_RULES,\n  RULES_HELP,\n} from './logger.rules';\n\nconst overrideRules: OverrideRule = {};\n\ntype OverrideRule = {\n  rules: Record<\n    | Partial<Rule>\n    | 'CONTRAST_CHECKER_MAX_DEPTH'\n    | 'IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS',\n    RuleAction\n  > | null;\n  accessibilityLabelExceptions: string[];\n};\n\nexport type LogParams = {\n  rule: Rule;\n  message: string;\n  extra?: any;\n};\n\nexport const getRuleAction = __DEV__\n  ? (rule: Rule): RuleAction => {\n      const customRule = canRuleBeOverridden?.(rule)\n        ? overrideRules?.rules?.[rule]\n        : undefined;\n\n      return customRule || LOGGER_RULES![rule];\n    }\n  : null;\n\ntype LogFailure = LogParams & {\n  action: RuleAction;\n};\n\ntype CHECK_STATUS = 'ERROR' | 'WARNING';\n\nexport const logFailure = __DEV__\n  ? ({ action, rule, message, extra = '' }: LogFailure): CHECK_STATUS => {\n      // @ts-ignore\n      const formattedMessage = `❌ ${SHELL_COLORS.BG_RED}[ AMA ]${SHELL_COLORS.RESET}: ${SHELL_COLORS.BLUE}${rule}${SHELL_COLORS.RESET} - ${SHELL_COLORS.YELLOW}${message}${SHELL_COLORS.RESET}\\n\\n${RULES_HELP[rule]}\\n\\n`;\n\n      switch (action) {\n        case 'MUST_NOT':\n        case 'MUST':\n          console.info(formattedMessage, extra || '', '\\n');\n\n          return 'ERROR';\n        case 'PLEASE_FORGIVE_ME':\n          // console.info(formattedMessage, extra || '', '\\n');\n\n          return 'WARNING';\n        case 'SHOULD_NOT':\n        default:\n          console.warn(formattedMessage, extra || '', '\\n');\n\n          return 'WARNING';\n      }\n    }\n  : null;\n\nexport const getContrastCheckerMaxDepth = __DEV__\n  ? () => {\n      return (\n        overrideRules?.rules?.CONTRAST_CHECKER_MAX_DEPTH ||\n        CONTRAST_CHECKER_MAX_DEPTH\n      );\n    }\n  : null;\n\nexport const shouldIgnoreContrastCheckForDisabledElement = __DEV__\n  ? () => {\n      return (\n        overrideRules?.rules?.IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS ||\n        IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS\n      );\n    }\n  : null;\n\nexport const isAccessibilityLabelAllowed = __DEV__\n  ? (accessibilityLabel: string) => {\n      return overrideRules?.accessibilityLabelExceptions?.includes(\n        accessibilityLabel,\n      );\n    }\n  : null;\n"],"mappings":";;;;;;;AAAA;;AAaA,MAAMA,aAA2B,GAAGC,OAAO,CAAC,wBAAD,CAA3C;;AAkBO,MAAMC,aAAa,GAAGC,OAAO,GAC/BC,IAAD,IAA4B;EAAA;;EAC1B,MAAMC,UAAU,GAAGC,2BAAA,aAAAA,2BAAA,mBAAAA,2BAAA,EAAsBF,IAAtB,IACfJ,aADe,aACfA,aADe,+CACfA,aAAa,CAAEO,KADA,yDACf,qBAAuBH,IAAvB,CADe,GAEfI,SAFJ;EAIA,OAAOH,UAAU,IAAII,oBAAA,CAAcL,IAAd,CAArB;AACD,CAP+B,GAQhC,IARG;;AAgBA,MAAMM,UAAU,GAAGP,OAAO,GAC7B,QAAqE;EAAA,IAApE;IAAEQ,MAAF;IAAUP,IAAV;IAAgBQ,OAAhB;IAAyBC,KAAK,GAAG;EAAjC,CAAoE;EACnE;EACA,MAAMC,gBAAgB,GAAI,KAAIC,oBAAA,CAAaC,MAAO,UAASD,oBAAA,CAAaE,KAAM,KAAIF,oBAAA,CAAaG,IAAK,GAAEd,IAAK,GAAEW,oBAAA,CAAaE,KAAM,MAAKF,oBAAA,CAAaI,MAAO,GAAEP,OAAQ,GAAEG,oBAAA,CAAaE,KAAM,OAAMG,kBAAA,CAAWhB,IAAX,CAAiB,MAA/M;;EAEA,QAAQO,MAAR;IACE,KAAK,UAAL;IACA,KAAK,MAAL;MACEU,OAAO,CAACC,IAAR,CAAaR,gBAAb,EAA+BD,KAAK,IAAI,EAAxC,EAA4C,IAA5C;MAEA,OAAO,OAAP;;IACF,KAAK,mBAAL;MACE;MAEA,OAAO,SAAP;;IACF,KAAK,YAAL;IACA;MACEQ,OAAO,CAACE,IAAR,CAAaT,gBAAb,EAA+BD,KAAK,IAAI,EAAxC,EAA4C,IAA5C;MAEA,OAAO,SAAP;EAdJ;AAgBD,CArB4B,GAsB7B,IAtBG;;AAwBA,MAAMW,0BAA0B,GAAGrB,OAAO,GAC7C,MAAM;EAAA;;EACJ,OACE,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEO,KAAf,gFAAsBkB,0BAAtB,KACAA,kCAFF;AAID,CAN4C,GAO7C,IAPG;;AASA,MAAMC,2CAA2C,GAAGvB,OAAO,GAC9D,MAAM;EAAA;;EACJ,OACE,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEO,KAAf,gFAAsBoB,qCAAtB,KACAA,6CAFF;AAID,CAN6D,GAO9D,IAPG;;AASA,MAAMC,2BAA2B,GAAGzB,OAAO,GAC7C0B,kBAAD,IAAgC;EAAA;;EAC9B,OAAO7B,aAAP,aAAOA,aAAP,gDAAOA,aAAa,CAAE8B,4BAAtB,0DAAO,sBAA6CC,QAA7C,CACLF,kBADK,CAAP;AAGD,CAL6C,GAM9C,IANG"}
\ No newline at end of file
diff --git a/node_modules/react-native-ama/dist/module/ama.rules.json b/node_modules/react-native-ama/dist/module/ama.rules.json
new file mode 100644
index 0000000..0967ef4
--- /dev/null
+++ b/node_modules/react-native-ama/dist/module/ama.rules.json
@@ -0,0 +1 @@
+{}
diff --git a/node_modules/react-native-ama/dist/module/internal/logger.js b/node_modules/react-native-ama/dist/module/internal/logger.js
index 960dfac..f88f811 100644
--- a/node_modules/react-native-ama/dist/module/internal/logger.js
+++ b/node_modules/react-native-ama/dist/module/internal/logger.js
@@ -1,7 +1,7 @@
 import { IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS, SHELL_COLORS, canRuleBeOverridden } from './logger.rules';
 import { CONTRAST_CHECKER_MAX_DEPTH, LOGGER_RULES, RULES_HELP } from './logger.rules';
 
-const overrideRules = require('./../../ama.rules.json');
+const overrideRules = {};
 
 export const getRuleAction = __DEV__ ? rule => {
   var _overrideRules$rules;
diff --git a/node_modules/react-native-ama/dist/module/internal/logger.js.map b/node_modules/react-native-ama/dist/module/internal/logger.js.map
index 805e407..14eca18 100644
--- a/node_modules/react-native-ama/dist/module/internal/logger.js.map
+++ b/node_modules/react-native-ama/dist/module/internal/logger.js.map
@@ -1 +1 @@
-{"version":3,"names":["IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS","SHELL_COLORS","canRuleBeOverridden","CONTRAST_CHECKER_MAX_DEPTH","LOGGER_RULES","RULES_HELP","overrideRules","require","getRuleAction","__DEV__","rule","customRule","rules","undefined","logFailure","action","message","extra","formattedMessage","BG_RED","RESET","BLUE","YELLOW","console","info","warn","getContrastCheckerMaxDepth","shouldIgnoreContrastCheckForDisabledElement","isAccessibilityLabelAllowed","accessibilityLabel","accessibilityLabelExceptions","includes"],"sources":["logger.ts"],"sourcesContent":["import {\n  IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS,\n  Rule,\n  RuleAction,\n  SHELL_COLORS,\n  canRuleBeOverridden,\n} from './logger.rules';\nimport {\n  CONTRAST_CHECKER_MAX_DEPTH,\n  LOGGER_RULES,\n  RULES_HELP,\n} from './logger.rules';\n\nconst overrideRules: OverrideRule = require('./../../ama.rules.json');\n\ntype OverrideRule = {\n  rules: Record<\n    | Partial<Rule>\n    | 'CONTRAST_CHECKER_MAX_DEPTH'\n    | 'IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS',\n    RuleAction\n  > | null;\n  accessibilityLabelExceptions: string[];\n};\n\nexport type LogParams = {\n  rule: Rule;\n  message: string;\n  extra?: any;\n};\n\nexport const getRuleAction = __DEV__\n  ? (rule: Rule): RuleAction => {\n      const customRule = canRuleBeOverridden?.(rule)\n        ? overrideRules?.rules?.[rule]\n        : undefined;\n\n      return customRule || LOGGER_RULES![rule];\n    }\n  : null;\n\ntype LogFailure = LogParams & {\n  action: RuleAction;\n};\n\ntype CHECK_STATUS = 'ERROR' | 'WARNING';\n\nexport const logFailure = __DEV__\n  ? ({ action, rule, message, extra = '' }: LogFailure): CHECK_STATUS => {\n      // @ts-ignore\n      const formattedMessage = `❌ ${SHELL_COLORS.BG_RED}[ AMA ]${SHELL_COLORS.RESET}: ${SHELL_COLORS.BLUE}${rule}${SHELL_COLORS.RESET} - ${SHELL_COLORS.YELLOW}${message}${SHELL_COLORS.RESET}\\n\\n${RULES_HELP[rule]}\\n\\n`;\n\n      switch (action) {\n        case 'MUST_NOT':\n        case 'MUST':\n          console.info(formattedMessage, extra || '', '\\n');\n\n          return 'ERROR';\n        case 'PLEASE_FORGIVE_ME':\n          // console.info(formattedMessage, extra || '', '\\n');\n\n          return 'WARNING';\n        case 'SHOULD_NOT':\n        default:\n          console.warn(formattedMessage, extra || '', '\\n');\n\n          return 'WARNING';\n      }\n    }\n  : null;\n\nexport const getContrastCheckerMaxDepth = __DEV__\n  ? () => {\n      return (\n        overrideRules?.rules?.CONTRAST_CHECKER_MAX_DEPTH ||\n        CONTRAST_CHECKER_MAX_DEPTH\n      );\n    }\n  : null;\n\nexport const shouldIgnoreContrastCheckForDisabledElement = __DEV__\n  ? () => {\n      return (\n        overrideRules?.rules?.IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS ||\n        IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS\n      );\n    }\n  : null;\n\nexport const isAccessibilityLabelAllowed = __DEV__\n  ? (accessibilityLabel: string) => {\n      return overrideRules?.accessibilityLabelExceptions?.includes(\n        accessibilityLabel,\n      );\n    }\n  : null;\n"],"mappings":"AAAA,SACEA,qCADF,EAIEC,YAJF,EAKEC,mBALF,QAMO,gBANP;AAOA,SACEC,0BADF,EAEEC,YAFF,EAGEC,UAHF,QAIO,gBAJP;;AAMA,MAAMC,aAA2B,GAAGC,OAAO,CAAC,wBAAD,CAA3C;;AAkBA,OAAO,MAAMC,aAAa,GAAGC,OAAO,GAC/BC,IAAD,IAA4B;EAAA;;EAC1B,MAAMC,UAAU,GAAGT,mBAAmB,SAAnB,IAAAA,mBAAmB,WAAnB,IAAAA,mBAAmB,CAAGQ,IAAH,CAAnB,GACfJ,aADe,aACfA,aADe,+CACfA,aAAa,CAAEM,KADA,yDACf,qBAAuBF,IAAvB,CADe,GAEfG,SAFJ;EAIA,OAAOF,UAAU,IAAIP,YAAY,CAAEM,IAAF,CAAjC;AACD,CAP+B,GAQhC,IARG;AAgBP,OAAO,MAAMI,UAAU,GAAGL,OAAO,GAC7B,QAAqE;EAAA,IAApE;IAAEM,MAAF;IAAUL,IAAV;IAAgBM,OAAhB;IAAyBC,KAAK,GAAG;EAAjC,CAAoE;EACnE;EACA,MAAMC,gBAAgB,GAAI,KAAIjB,YAAY,CAACkB,MAAO,UAASlB,YAAY,CAACmB,KAAM,KAAInB,YAAY,CAACoB,IAAK,GAAEX,IAAK,GAAET,YAAY,CAACmB,KAAM,MAAKnB,YAAY,CAACqB,MAAO,GAAEN,OAAQ,GAAEf,YAAY,CAACmB,KAAM,OAAMf,UAAU,CAACK,IAAD,CAAO,MAA/M;;EAEA,QAAQK,MAAR;IACE,KAAK,UAAL;IACA,KAAK,MAAL;MACEQ,OAAO,CAACC,IAAR,CAAaN,gBAAb,EAA+BD,KAAK,IAAI,EAAxC,EAA4C,IAA5C;MAEA,OAAO,OAAP;;IACF,KAAK,mBAAL;MACE;MAEA,OAAO,SAAP;;IACF,KAAK,YAAL;IACA;MACEM,OAAO,CAACE,IAAR,CAAaP,gBAAb,EAA+BD,KAAK,IAAI,EAAxC,EAA4C,IAA5C;MAEA,OAAO,SAAP;EAdJ;AAgBD,CArB4B,GAsB7B,IAtBG;AAwBP,OAAO,MAAMS,0BAA0B,GAAGjB,OAAO,GAC7C,MAAM;EAAA;;EACJ,OACE,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEM,KAAf,gFAAsBT,0BAAtB,KACAA,0BAFF;AAID,CAN4C,GAO7C,IAPG;AASP,OAAO,MAAMwB,2CAA2C,GAAGlB,OAAO,GAC9D,MAAM;EAAA;;EACJ,OACE,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEM,KAAf,gFAAsBZ,qCAAtB,KACAA,qCAFF;AAID,CAN6D,GAO9D,IAPG;AASP,OAAO,MAAM4B,2BAA2B,GAAGnB,OAAO,GAC7CoB,kBAAD,IAAgC;EAAA;;EAC9B,OAAOvB,aAAP,aAAOA,aAAP,gDAAOA,aAAa,CAAEwB,4BAAtB,0DAAO,sBAA6CC,QAA7C,CACLF,kBADK,CAAP;AAGD,CAL6C,GAM9C,IANG"}
\ No newline at end of file
+{"version":3,"names":["IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS","SHELL_COLORS","canRuleBeOverridden","CONTRAST_CHECKER_MAX_DEPTH","LOGGER_RULES","RULES_HELP","overrideRules","require","getRuleAction","__DEV__","rule","customRule","rules","undefined","logFailure","action","message","extra","formattedMessage","BG_RED","RESET","BLUE","YELLOW","console","info","warn","getContrastCheckerMaxDepth","shouldIgnoreContrastCheckForDisabledElement","isAccessibilityLabelAllowed","accessibilityLabel","accessibilityLabelExceptions","includes"],"sources":["logger.ts"],"sourcesContent":["import {\n  IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS,\n  Rule,\n  RuleAction,\n  SHELL_COLORS,\n  canRuleBeOverridden,\n} from './logger.rules';\nimport {\n  CONTRAST_CHECKER_MAX_DEPTH,\n  LOGGER_RULES,\n  RULES_HELP,\n} from './logger.rules';\n\nconst overrideRules: OverrideRule = {};\n\ntype OverrideRule = {\n  rules: Record<\n    | Partial<Rule>\n    | 'CONTRAST_CHECKER_MAX_DEPTH'\n    | 'IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS',\n    RuleAction\n  > | null;\n  accessibilityLabelExceptions: string[];\n};\n\nexport type LogParams = {\n  rule: Rule;\n  message: string;\n  extra?: any;\n};\n\nexport const getRuleAction = __DEV__\n  ? (rule: Rule): RuleAction => {\n      const customRule = canRuleBeOverridden?.(rule)\n        ? overrideRules?.rules?.[rule]\n        : undefined;\n\n      return customRule || LOGGER_RULES![rule];\n    }\n  : null;\n\ntype LogFailure = LogParams & {\n  action: RuleAction;\n};\n\ntype CHECK_STATUS = 'ERROR' | 'WARNING';\n\nexport const logFailure = __DEV__\n  ? ({ action, rule, message, extra = '' }: LogFailure): CHECK_STATUS => {\n      // @ts-ignore\n      const formattedMessage = `❌ ${SHELL_COLORS.BG_RED}[ AMA ]${SHELL_COLORS.RESET}: ${SHELL_COLORS.BLUE}${rule}${SHELL_COLORS.RESET} - ${SHELL_COLORS.YELLOW}${message}${SHELL_COLORS.RESET}\\n\\n${RULES_HELP[rule]}\\n\\n`;\n\n      switch (action) {\n        case 'MUST_NOT':\n        case 'MUST':\n          console.info(formattedMessage, extra || '', '\\n');\n\n          return 'ERROR';\n        case 'PLEASE_FORGIVE_ME':\n          // console.info(formattedMessage, extra || '', '\\n');\n\n          return 'WARNING';\n        case 'SHOULD_NOT':\n        default:\n          console.warn(formattedMessage, extra || '', '\\n');\n\n          return 'WARNING';\n      }\n    }\n  : null;\n\nexport const getContrastCheckerMaxDepth = __DEV__\n  ? () => {\n      return (\n        overrideRules?.rules?.CONTRAST_CHECKER_MAX_DEPTH ||\n        CONTRAST_CHECKER_MAX_DEPTH\n      );\n    }\n  : null;\n\nexport const shouldIgnoreContrastCheckForDisabledElement = __DEV__\n  ? () => {\n      return (\n        overrideRules?.rules?.IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS ||\n        IGNORE_CONTRAST_FOR_DISABLED_ELEMENTS\n      );\n    }\n  : null;\n\nexport const isAccessibilityLabelAllowed = __DEV__\n  ? (accessibilityLabel: string) => {\n      return overrideRules?.accessibilityLabelExceptions?.includes(\n        accessibilityLabel,\n      );\n    }\n  : null;\n"],"mappings":"AAAA,SACEA,qCADF,EAIEC,YAJF,EAKEC,mBALF,QAMO,gBANP;AAOA,SACEC,0BADF,EAEEC,YAFF,EAGEC,UAHF,QAIO,gBAJP;;AAMA,MAAMC,aAA2B,GAAGC,OAAO,CAAC,wBAAD,CAA3C;;AAkBA,OAAO,MAAMC,aAAa,GAAGC,OAAO,GAC/BC,IAAD,IAA4B;EAAA;;EAC1B,MAAMC,UAAU,GAAGT,mBAAmB,SAAnB,IAAAA,mBAAmB,WAAnB,IAAAA,mBAAmB,CAAGQ,IAAH,CAAnB,GACfJ,aADe,aACfA,aADe,+CACfA,aAAa,CAAEM,KADA,yDACf,qBAAuBF,IAAvB,CADe,GAEfG,SAFJ;EAIA,OAAOF,UAAU,IAAIP,YAAY,CAAEM,IAAF,CAAjC;AACD,CAP+B,GAQhC,IARG;AAgBP,OAAO,MAAMI,UAAU,GAAGL,OAAO,GAC7B,QAAqE;EAAA,IAApE;IAAEM,MAAF;IAAUL,IAAV;IAAgBM,OAAhB;IAAyBC,KAAK,GAAG;EAAjC,CAAoE;EACnE;EACA,MAAMC,gBAAgB,GAAI,KAAIjB,YAAY,CAACkB,MAAO,UAASlB,YAAY,CAACmB,KAAM,KAAInB,YAAY,CAACoB,IAAK,GAAEX,IAAK,GAAET,YAAY,CAACmB,KAAM,MAAKnB,YAAY,CAACqB,MAAO,GAAEN,OAAQ,GAAEf,YAAY,CAACmB,KAAM,OAAMf,UAAU,CAACK,IAAD,CAAO,MAA/M;;EAEA,QAAQK,MAAR;IACE,KAAK,UAAL;IACA,KAAK,MAAL;MACEQ,OAAO,CAACC,IAAR,CAAaN,gBAAb,EAA+BD,KAAK,IAAI,EAAxC,EAA4C,IAA5C;MAEA,OAAO,OAAP;;IACF,KAAK,mBAAL;MACE;MAEA,OAAO,SAAP;;IACF,KAAK,YAAL;IACA;MACEM,OAAO,CAACE,IAAR,CAAaP,gBAAb,EAA+BD,KAAK,IAAI,EAAxC,EAA4C,IAA5C;MAEA,OAAO,SAAP;EAdJ;AAgBD,CArB4B,GAsB7B,IAtBG;AAwBP,OAAO,MAAMS,0BAA0B,GAAGjB,OAAO,GAC7C,MAAM;EAAA;;EACJ,OACE,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEM,KAAf,gFAAsBT,0BAAtB,KACAA,0BAFF;AAID,CAN4C,GAO7C,IAPG;AASP,OAAO,MAAMwB,2CAA2C,GAAGlB,OAAO,GAC9D,MAAM;EAAA;;EACJ,OACE,CAAAH,aAAa,SAAb,IAAAA,aAAa,WAAb,qCAAAA,aAAa,CAAEM,KAAf,gFAAsBZ,qCAAtB,KACAA,qCAFF;AAID,CAN6D,GAO9D,IAPG;AASP,OAAO,MAAM4B,2BAA2B,GAAGnB,OAAO,GAC7CoB,kBAAD,IAAgC;EAAA;;EAC9B,OAAOvB,aAAP,aAAOA,aAAP,gDAAOA,aAAa,CAAEwB,4BAAtB,0DAAO,sBAA6CC,QAA7C,CACLF,kBADK,CAAP;AAGD,CAL6C,GAM9C,IANG"}
\ No newline at end of file
diff --git a/node_modules/react-native-ama/dist/typescript/ama.rules.json b/node_modules/react-native-ama/dist/typescript/ama.rules.json
new file mode 100644
index 0000000..0967ef4
--- /dev/null
+++ b/node_modules/react-native-ama/dist/typescript/ama.rules.json
@@ -0,0 +1 @@
+{}
diff --git a/node_modules/react-native-ama/lib/internal/logger.ts b/node_modules/react-native-ama/lib/internal/logger.ts
index 60b86af..9f99fd6 100755
--- a/node_modules/react-native-ama/lib/internal/logger.ts
+++ b/node_modules/react-native-ama/lib/internal/logger.ts
@@ -11,7 +11,7 @@ import {
   RULES_HELP,
 } from './logger.rules';
 
-const overrideRules: OverrideRule = require('./../../ama.rules.json');
+const overrideRules: OverrideRule = {};
 
 type OverrideRule = {
   rules: Record<
